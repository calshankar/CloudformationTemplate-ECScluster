AWSTemplateFormatVersion: "2010-09-09"

Description: Microtrader App Stack

Parameters:
  LogRetention:
    Type: Number
    Description: Log Retention (Days)
    Default: 3
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120]
  DatabaseMultiAZ:
    Type: String
    Description: Set the DB paramter to Multi AZ
    AllowedValues:
      - "true"
      - "false"
    Default:
      - "false"
  DatabaseInstanceType:
    Type: String
    Description: Select the instance type for Mysql DB
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
  ApplicationDnsName:
    Type: String
    Description: Hostname portion of application FQDN
  ApplicationDesiredCount:
    Type: Number
    Description: Number to instance count
    Default: 1
  AppImageId:
    Type: String
    Description: Amazon ImageId
  AppKeyName:
    Type: String
    Description: SSH Key Pair
  MicrotraderclusterDiscoveryEgress:
    Type: Number
    Description: HTTP port of Dashboard service
  AppInstanceType:
    Type: String
    Description: EC2 Instance Type
    AllowedValues:
      - t2.micro
      - t2.small
  MicrotraderDashboardHttpPort:
    Type: Number
    Description: Container port for Microtrader Dashboard
  MicrotraderAuditHttpPort:
    Type: Number
    Description: Container port for Microtrader Audit Service
  MicrotraderQuoteHttpPort:
    Type: Number
    Description: Container port for Microtrader Quote Service
  VpcName:
    Type: String
    Description: Name of Target Vpc
    Default: Default

Conditions:
  DatabaseMultiAZ:
    Fn::Equals:
      - Ref: DatabaseMultiAZ
      - "false"

Resources:
  DashboardServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/DashboardService/dashboard
      RetentionInDays:
        Ref: LogRetention
  PortfolioServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/PortfolioService/portfolio
      RetentionInDays:
        Ref: LogRetention
  AuditServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/AuditService/audit
      RetentionInDays:
        Ref: LogRetention
  QuoteServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/QuoteService/quote
      RetentionInDays:
        Ref: LogRetention
  DmesgLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/AppAutoScaling/var/log/dmesg
      RetentionInDays:
        Ref: LogRetention
  MessagesLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/AppAutoScaling/var/log/messages
      RetentionInDays:
        Ref: LogRetention
  DockerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/AppAutoScaling/var/log/docker
      RetentionInDays:
        Ref: LogRetention
  EcsAgentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/AppAutoScaling/var/log/ecs/ecs-agent
      RetentionInDays:
        Ref: LogRetention
  EcsInitLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/AppAutoScaling/var/log/ecs/ecs-init
      RetentionInDays:
        Ref: LogRetention      
  ApplicationAutoscalingToApplicationDatabaseEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId:
        Ref: AppAutoscalingSecurityGroup
      DestinationSecurityGroupId:
        Ref: AppDBSecurityGroup
  ApplicationAutoscalingToApplicationDatabaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId:
        Ref: AppDBSecurityGroup
      SourceSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
  AppDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        - Fn::ImportValue:
            Fn::sub: ${VpcId}VpcId
    SecurityGroupIngress: []
    SecurityGroupEgress:
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 192.0.2.0/32
    Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}AppDBSecurityGroup
  AppDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Application Database Subnet Group
      SubnetIds:
        - Fn::ImportValue: 
            Fn::Sub: ${VpcName}HighSubnetA
        - Fn::ImportValue: 
            Fn::Sub: ${VpcName}HighSubnetB
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${AWS::StackName}-AppDBSubnetGroup      
  AppDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      Engine: MySQL
      EngineVersion: 5.7
      DBInstanceClass:
        Ref: DatabaseInstanceType
      AllocatedStorage: 10
      StorageType: gp2
      MasterUsername:
        Ref: DatabaseUsername
      MasterUserPassword:
        Fn::Sub: ${DatabaseSecret.Value}
      DBName:
        Ref: DatabaseName
      VPCSecurityGroups:
        - Ref: ApplicationDatabaseSecurityGroup
      DBSubnetGroupName:
        Ref: ApplicationDatabaseSubnetGroup
      MultiAZ:
        Ref: DatabaseMultiAZ
      AvailabilityZone: 
        Fn::If:
          - DatabaseSingleAZCondition
          - Fn::Sub: ${AWS::Region}a
          - Ref: AWS::NoValue
  AppDnsRecord:
  Type: 'AWS::Route53::RecordSet'
  Properties:
    Name:
      'Fn::Join':
        - ''
        - - 'Fn::Sub': '${AppDnsName}'
          - "."
          - 'Fn::ImportValue': '${VpcName}VpcDomain'
    HostedZoneName:
      'Fn::Join':
        - ''
        - - 'Fn::ImportValue': '${VpcName}VpcDomain'
          - '.'
    Type: CNAME
    Comment:
      Fn::sub: ${AWS::StackName} App Dns Record
    ResourceRecords:
      Fn::Sub: ${AppLoadBalancer.DNSName}
  MicrotraderToApplicationLoadBalancerEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId:
        Ref: AppAutoscalingSecurityGroup
      DestinationSecurityGroupId:
        Ref: AppLoadBalancerSecurityGroup
  MicrotraderToApplicationLoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId:
        Ref: AppLoadBalancerSecurityGroup
      SourceSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
  AppLoadBalancerToMicrotraderAuditEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: MicrotraderAuditHttpPort
      ToPort:
        Ref: MicrotraderAuditHttpPort
      DestinationSecurityGroupId:
        Ref: AppLoadBalancerSecurityGroup
      SourceSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
  AppLoadBalancerToMicrotraderAuditIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: MicrotraderAuditHttpPort
      ToPort:
        Ref: MicrotraderAuditHttpPort
      DestinationSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
      SourceSecurityGroupId:
        Ref: AppLoadBalancerSecurityGroup
  AppLoadBalancerToMicrotraderQuoteEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: MicrotraderQuoteHttpPort
      ToPort:
        Ref: MicrotraderQuoteHttpPort
      DestinationSecurityGroupId:
        Ref: AppLoadBalancerSecurityGroup
      SourceSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
  AppLoadBalancerToMicrotraderQuoteIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: MicrotraderQuoteHttpPort
      ToPort:
        Ref: MicrotraderQuoteHttpPort
      DestinationSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
      SourceSecurityGroupId:
        Ref: AppLoadBalancerSecurityGroup
  QuoteServiceTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Protocol: HTTP
        Port:
          Ref: MicrotraderQuoteHttpPort
        HealthCheckPath: /quote/
        VpcId:
          Fn::ImportValue:
            Fn::Sub: ${VpcName}VpcId
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 30
  AuditServiceTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Protocol: HTTP
        Port:
          Ref: MicrotraderAuditHttpPort
        HealthCheckPath: /audit/
        VpcId:
          Fn::ImportValue:
            Fn::Sub: ${VpcName}VpcId
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 30
  AuditServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListnerRule
    Properties:
      ListnerArn:
        Ref: AppLoadBalancerHttpListener
      Priority: 1
    Actions:
      - Type: forward
        TargetGroupArn:
          Ref: AuditServiceTargetGroup
    Conditions:
      - Field: path-pattern
        Values: 
          - Fn::Sub: /audit/* 
  AppLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listner
    Properties:
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn:
            Ref: QuoteServiceTargetGroup
          Type: forward
  AppLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App LB SG for internal Service LB
    VpcId:
      Fn::ImportValue:
        Fn::Sub: ${VpcName}VpcId
    SecurityGroupIngress: []
    SecurityGroupEgress: []
    Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-AppLoadBalancerSecurityGroup
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: ${VpcName}MediumSubnetA
        - Fn::ImportValue:
            Fn::Sub: ${VpcName}MediumSubnetB
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
        - Key: idle_timeout.timeout_seconds
          Value: 30
      SecurityGroups:
        - Ref: AppLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-App-internal-LoadBalancer
  PublicLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listner
    Properties:
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn:
            Ref: DashboardServiceTargetGroup
          Type: forward
    DashboardServiceTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Protocol: HTTP
        Port:
          Ref: MicrotraderDashboardHttpPort
        VpcId:
          Fn::ImportValue:
            Fn::Sub: ${VpcName}VpcId
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 30
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public LB SG
    VpcId:
      Fn::ImportValue:
        Fn::Sub: ${VpcName}VpcId
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
    Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-PublicLoadBalancerSecurityGroup
# The following rule is for Egress traffic from Public LB towards ASG of the App
  PublicLoadBalancerToMicrotraderDashboardEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: MicrotraderDashboardHttpPort
      ToPort:
        Ref: MicrotraderDashboardHttpPort
      DestinationSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
      SourceSecurityGroupId:
        Ref: PublicLoadBalancerSecurityGroup
  PublicLoadBalancerToMicrotraderDashboardIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: MicrotraderDashboardHttpPort
      ToPort:
        Ref: MicrotraderDashboardHttpPort
      DestinationSecurityGroupId:
        Ref: PublicLoadBalancerSecurityGroup
      SourceSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup          
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: ${VpcName}PublicSubnetA
        - Fn::ImportValue:
            Fn::Sub: ${VpcName}PublicSubnetB
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
        - Key: idle_timeout.timeout_seconds
          Value: 30
      SecurityGroups:
        - Ref: PublicLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-PublicLoadBalancer
  AppAutoscalingInstanceProfile:
    Type: AWS::IamInstanceProfile
    Properties:
      Roles:
        - Ref:: AppAutoscalingInstanceRole
  AppAutoscalingInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ECSContainerInstancePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RegisterContainerInstance
                  - ecs:DeregisterContainerInstance
                Resource:
                  Fn::Sub: arn::aws::ecs:${AWS::Region}:${AWS::AccountId}:cluster/${AppCluster}
              - Effect: Allow
                Action:
                  - ecs:DiscoverPollEndpoint
                  - ecs:Submit*
                  - ecs:Poll
                  - ecs:StartTelemetrySession
                Resource: "*"
              - Effect: Allow
                Action: 
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: "*"
        - PolicyName: HazelcastClusterDiscoveryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action: ec2:DescribeInstances
              Resource: "*"
              Effect: Allow
        - PolicyName: CloudwatchLogsPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*
  AppAutoscalingLaunchConfig:
    Type: AWS::Autoscaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: sh firstrun.sh
              cwd: /home/ec2-user
              env:
                STACK_NAME:
                  Ref: AWS::StackName
                AUTOSCALING_GROUP: AppAutoscaling
                AWS_DEFAULT_REGION:
                  Ref: AWS::Region
                ECS_CLUSTER:
                  Ref: AWS::AppCluster
                PROXY_URL:
                  Fn::ImportValue:
                    Fn::Sub: ${VpcName}ProxyUrl
                DOCKER_NETWORK_MODE: host
    Properties:
      ImageId:
        Ref: AppImageId
      InstanceType:
        Ref: AppInstanceType
      KeyName:
        Ref: AppKeyName
      IamInstanceProfile:
        Ref: AppAutoscalingInstanceProfile
      SecurityGroups:
        - Ref: AppAutoscalingSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join: ["", [
             "#!/bin/bash\n",
            "/opt/aws/bin/cfn-init -v ",
            "    --stack ", { "Ref" : "AWS::StackName" },
            "    --resource AppAutoscalingLaunchConfig ",
            "    --region ", { "Ref" : "AWS::Region" },
            "    --http-proxy ", "Fn::ImportValue": { "Fn::Sub": "${VpcName}ProxyUrl" },
            "    --https-proxy ", "Fn::ImportValue": { "Fn::Sub": "${VpcName}ProxyUrl" },
            "\n",
            "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
            "    --resource AppAutoscaling ",
            "    --region ", { "Ref" : "AWS::Region" },
            "    --http-proxy ", "Fn::ImportValue": { "Fn::Sub": "${VpcName}ProxyUrl" },
            "    --https-proxy ", "Fn::ImportValue": { "Fn::Sub": "${VpcName}ProxyUrl" },
            "\n",
          ] ]
  AppAutoscaling:
    Type: AWS::Autoscaling::AutoscalingGroup
    DependsOn:
      - DmesgLogGroup
      - MessagesLogGroup
      - DockerLogGroup
      - EcsInitLogGroup
      - EcsAgentLogGroup
    CreationPolicy:
      ResourcesSignal:
        Count:
          Ref: ApplicationDesiredCount
        Timeout: PT15M
    Properties:
      LaunchConfiguration:
        Ref: AppAutoscalingLaunchConfig
      MinSize: 0
      MaxSize: 4
      DesiredCapacity:
        Ref: ApplicationDesiredCount
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: ${VpcName}MediumSubnetA
        - Fn::ImportValue:
            Fn::Sub: ${VpcName}MediumSubnetB
      tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-AppAutoscaling-instance
          PropagateAtLaunch: "true"
        - Key: Hazelcast:group
          Value:
            Ref: AppCluster
  MicrotraderClusterDiscoverIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 
          Fn::Sub: ${AWS::StackName} Cluster Discovery SG
      IpProtocol: tcp
      FromPort: 5701
      ToPort: 5710
      SourceSecurityGroupId:
        Ref: AppAutoscalingSecurityGroup
      GroupId:
        Ref: AppAutoscalingSecurityGroup
  MicrotraderclusterDiscoveryEgress:  
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
        Description: 
          Fn::Sub: ${AWS::StackName} Cluster Discovery SG
        IpProtocol: tcp
        FromPort: 5701
        ToPort: 5711
        SourceSecurityGroupId:
          Ref: AppAutoscalingSecurityGroup
        GroupId:
          Ref: AppAutoscalingSecurityGroup
  MicrotraderEventBusIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        Description: 
          Fn::Sub: ${AWS::StackName} Event egress Bus SG
        IpProtocol: tcp
        FromPort: 15701
        ToPort: 15704
        SourceSecurityGroupId:
          Ref: AppAutoscalingSecurityGroup
        GroupId:
          Ref: AppAutoscalingSecurityGroup
  MicrotraderEventBusEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
        Description: 
          Fn::Sub: ${AWS::StackName} Event egress Bus SG
        IpProtocol: tcp
        FromPort: 15701
        ToPort: 15704
        SourceSecurityGroupId:
          Ref: AppAutoscalingSecurityGroup
        GroupId:
          Ref: AppAutoscalingSecurityGroup                              
  AppAutoscalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription:
          Fn::Sub: ${AWS::StackName} App Autoscaling SG
        VpcId:
          Fn::Import:
            Fn::Sub: ${VpcName}VpcCidr
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            Fn::ImportValue:
              Fn::Sub: ${VpcName}VpcCidr
        SecurityGroupEgress:
          - IpProtocol: udp
            FromPort: 53
            ToPort: 53
            CidrIp:
              Fn::Join: ["", [ "Fn::ImportValue": { "Fn::Sub": "${VpcName}VpcDnsServer" }, "/32" ] ]
          - IpProtocol: tcp
            FromPort: 3128
            ToPort: 3128
            DestinationSecurityGroupId:
              Fn::ImportValue:
                Fn::Sub: ${VpcName}ProxySecurityGroup

Outputs:
  PublicLoadBalancerUrl:
    Description: Public load balancer url
    Value:
      Fn::Sub: ${PublicLoadBalancer.DNSName}